// פונקציות לניהול סוכנים
// גרסה: 1.3 - תיקון תמיכה בדפדפנים שונים ובעיות SSL

// בדיקה אם אנחנו בסביבת פיתוח או ייצור
const isProduction = window.location.hostname !== 'localhost' && !window.location.hostname.includes('127.0.0.1');

// בסיס ה-URL של ה-API המתאים לסביבה
const API_BASE_URL = isProduction 
    ? 'https://home-lend.moishiweb.com' // כתובת האתר המלאה בסביבת ייצור
    : ''; // בסביבת פיתוח מקומית - נשתמש בנתיב יחסי

// פונקציה משופרת לשליחת בקשות API
async function fetchApi(url, options = {}) {
    console.log(`שולח בקשת ${options.method || 'GET'} ל-${url}`, options.body ? 'עם נתונים' : 'ללא נתונים');
    
    try {
        // הוספת בסיס ה-URL המתאים לסביבה
        const fullUrl = `${API_BASE_URL}${url}`;
        console.log('שולח בקשה לכתובת מלאה:', fullUrl);
        
        const response = await fetch(fullUrl, options);
        
        // בדיקת שגיאות HTTP
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ 
                error: `שגיאת HTTP: ${response.status} ${response.statusText}` 
            }));
            
            console.error('שגיאה בתגובת השרת:', errorData);
            return { error: errorData.error || 'שגיאה לא ידועה', success: false };
        }
        
        // המרת התגובה ל-JSON
        const data = await response.json();
        console.log('תגובת שרת תקינה:', typeof data);
        return data;
        
    } catch (error) {
        console.error('שגיאה בשליחת בקשת API:', error);
        throw new Error(`שגיאת תקשורת: ${error.message}`);
    }
}

// פונקציה לטעינת סוכנים
async function loadAgents() {
    const agentsTableBody = document.getElementById('agentsTableBody');
    if (!agentsTableBody) return;
    
    try {
        // ניקוי הטבלה הקיימת
        agentsTableBody.innerHTML = '<tr><td colspan="6" class="loading-cell">טוען סוכנים...</td></tr>';
        
        const agents = await fetchApi('/api/agents');
        console.log('סוכנים שנטענו:', agents.length, 'מזהים:', agents.map(a => a.id));

        // ניקוי הודעת טעינה
        agentsTableBody.innerHTML = '';

        if (agents && agents.length > 0) {
            document.getElementById('no-agents-message').style.display = 'none';

            agents.forEach(agent => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${agent.name || '-'}</td>
                    <td>${agent.title || '-'}</td>
                    <td>${agent.phone || '-'}</td>
                    <td>${agent.email || '-'}</td>
                    <td>
                        <img src="${agent.image || '/img/default-agent.jpg'}" alt="${agent.name}" class="agent-thumbnail">
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary btn-edit-agent" data-id="${agent.id}"><i class="fas fa-edit"></i></button>
                        <button class="btn btn-sm btn-danger btn-delete-agent" data-id="${agent.id}"><i class="fas fa-trash"></i></button>
                    </td>
                `;
                agentsTableBody.appendChild(row);
            });

            // הוספת מאזיני אירועים לכפתורים החדשים
            addAgentButtonListeners();
        } else {
            document.getElementById('no-agents-message').style.display = 'block';
        }
    } catch (error) {
        console.error('שגיאה בטעינת סוכנים:', error);
        showErrorMessage('שגיאה בטעינת סוכנים', error.message);
    }
}

// פונקציה להוספת מאזיני אירועים לכפתורי עריכה ומחיקה של סוכנים
function addAgentButtonListeners() {
    console.log('הוספת מאזיני אירועים לכפתורי עריכה ומחיקה של סוכנים');
    
    // מאזינים לכפתורי עריכה
    document.querySelectorAll('.btn-edit-agent').forEach(button => {
        // הסרת מאזינים קיימים על ידי שכפול האלמנט
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
        
        // הוספת מאזין חדש
        newButton.addEventListener('click', function() {
            const agentId = this.getAttribute('data-id');
            console.log('לחיצה על כפתור עריכה עם מזהה:', agentId);
            editAgent(agentId);
        });
    });
    
    // מאזינים לכפתורי מחיקה
    document.querySelectorAll('.btn-delete-agent').forEach(button => {
        // הסרת מאזינים קיימים על ידי שכפול האלמנט
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
        
        // הוספת מאזין חדש
        newButton.addEventListener('click', function() {
            const agentId = this.getAttribute('data-id');
            const agentRow = this.closest('tr');
            const agentName = agentRow.cells[0].textContent; // התא הראשון מכיל את שם הסוכן
            
            if (confirm(`האם אתה בטוח שברצונך למחוק את הסוכן ${agentName}?`)) {
                deleteAgent(agentId);
            }
        });
    });
}

// פונקציה להצגת מודאל הסוכן
function showAgentModal(agent = null) {
    console.log('הצגת מודאל סוכן', agent);
    const modal = document.getElementById('agent-modal');
    const modalTitle = document.getElementById('agent-modal-title');
    const form = document.getElementById('agentForm');
    
    if (!modal || !form) {
        console.error('לא נמצאו אלמנטים נדרשים למודאל');
        console.error('modal:', modal, 'form:', form);
        alert('שגיאה בטעינת המודאל');
        return;
    }
    
    // איפוס הטופס
    form.reset();
    
    const imagePreview = document.getElementById('agent-image-preview');
    if (imagePreview) {
        imagePreview.style.backgroundImage = '';
    }
    
    if (agent) {
        // מצב עריכה - מילוי הטופס בנתוני הסוכן
        modalTitle.textContent = 'עריכת סוכן';
        
        // הדפסת נתוני הסוכן לשדות הטופס
        const idField = document.getElementById('agent-id');
        const nameField = document.getElementById('agent-name');
        const titleField = document.getElementById('agent-title');
        const phoneField = document.getElementById('agent-phone');
        const emailField = document.getElementById('agent-email');
        const bioField = document.getElementById('agent-bio');
        
        if (idField) idField.value = agent.id || '';
        if (nameField) nameField.value = agent.name || '';
        if (titleField) titleField.value = agent.title || '';
        if (phoneField) phoneField.value = agent.phone || '';
        if (emailField) emailField.value = agent.email || '';
        if (bioField) bioField.value = agent.bio || '';
        
        // הצגת תמונת הסוכן אם קיימת
        if (agent.image && imagePreview) {
            console.log('טוען תמונת סוכן:', agent.image);
            imagePreview.style.backgroundImage = `url(${agent.image})`;
        }
    } else {
        // מצב הוספה - טופס ריק
        modalTitle.textContent = 'הוספת סוכן חדש';
        const idField = document.getElementById('agent-id');
        if (idField) idField.value = '';
    }
    
    // הצגת המודאל - בדיקה אם האתר משתמש ב-Bootstrap או ב-style.display
    try {
        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            // שימוש ב-Bootstrap Modal
            const modalInstance = new bootstrap.Modal(modal);
            modalInstance.show();
            console.log('מציג מודאל באמצעות Bootstrap');
        } else {
            // שימוש בהצגה סטנדרטית
            modal.style.display = 'block';
            console.log('מציג מודאל באמצעות style.display');
        }
    } catch (error) {
        console.error('שגיאה בהצגת המודאל:', error);
        // ניסיון גיבוי - הצגת המודאל בדרך רגילה
        modal.style.display = 'block';
    }
}

// פונקציה להסתרת מודאל הסוכן
function hideAgentModal() {
    const modal = document.getElementById('agent-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// פונקציה לעריכת סוכן קיים
async function editAgent(agentId) {
    try {
        console.log('עריכת סוכן עם מזהה:', agentId, 'סוג:', typeof agentId);
        
        // מציאת הסוכן ברשימת הסוכנים הקיימת
        const agents = await fetchApi('/api/agents');
        
        if (!agents || !Array.isArray(agents)) {
            throw new Error('לא התקבלו נתוני סוכנים תקינים מהשרת');
        }
        
        console.log('סוכנים שנטענו:', agents.length, 'מזהים:', agents.map(a => a.id));
        
        // חיפוש הסוכן לפי מזהה (המרה למחרוזת להשוואה בטוחה)
        const agent = agents.find(a => String(a.id) === String(agentId));
        
        if (!agent) {
            console.error(`לא נמצא סוכן עם מזהה ${agentId}`);
            alert('לא נמצא סוכן עם מזהה זה');
            return;
        }
        
        console.log('פרטי הסוכן שנמצא:', agent);
        
        // שימוש בפונקציית showAgentModal הקיימת להצגת המודאל
        showAgentModal(agent);
        
    } catch (error) {
        console.error('שגיאה בעריכת סוכן:', error);
        alert('שגיאה בעריכת סוכן: ' + error.message);
    }
}

// פונקציה למחיקת סוכן
async function deleteAgent(agentId) {
    try {
        // שימוש ב-POST במקום DELETE לתמיכה טובה יותר בדפדפנים
        const response = await fetchApi(`/api/agents/${agentId}/delete`, {
            method: 'POST'
        });
        
        if (response.success) {
            showSuccessMessage('סוכן נמחק בהצלחה');
            // טעינה מחדש של רשימת הסוכנים
            loadAgents();
        } else {
            throw new Error(response.error || 'שגיאה לא ידועה');
        }
    } catch (error) {
        console.error('שגיאה במחיקת סוכן:', error);
        showErrorMessage('שגיאה במחיקת סוכן', error.message);
    }
}

// פונקציה לטיפול בהגשת טופס הסוכן
async function handleAgentSubmit(e) {
    e.preventDefault();
    
    try {
        const form = e.target;
        const formData = new FormData(form);
        const agentId = formData.get('id');
        
        console.log('שולח מידע סוכן, מזהה:', agentId || 'חדש');
        
        // המרה לאובייקט JSON
        const agentData = {
            name: formData.get('name'),
            title: formData.get('title'),
            phone: formData.get('phone'),
            email: formData.get('email'),
            bio: formData.get('bio')
        };
        
        console.log('נתוני סוכן לשליחה:', agentData);
        
        // הוספת התמונה אם קיימת
        const imagePreview = document.getElementById('agent-image-preview');
        if (imagePreview && imagePreview.style.backgroundImage) {
            const bgImage = imagePreview.style.backgroundImage;
            // הוצאת ה-URL מתוך ה-CSS
            const urlMatch = bgImage.match(/url\(["']?([^"']*)[""]?\)/);
            if (urlMatch && urlMatch[1]) {
                // אם זה URL של תמונה קיימת (לא base64)
                if (!urlMatch[1].startsWith('data:')) {
                    console.log('משתמש בתמונה קיימת');
                    // אם זו תמונה קיימת ולא חדשה, לא צריך לשלוח אותה שוב
                } else {
                    // אם זה base64 של תמונה חדשה
                    console.log('מוסיף תמונה חדשה');
                    agentData.image = urlMatch[1];
                }
            }
        }
        
        // שליחת הנתונים לשרת
        let response;
        
        if (agentId) {
            console.log('שולח עדכון סוכן', agentId);
            // שימוש ב-POST במקום PUT לתמיכה טובה יותר בדפדפנים
            response = await fetchApi(`/api/agents/${agentId}/update`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(agentData)
            });
        } else {
            console.log('שולח יצירת סוכן חדש');
            response = await fetchApi('/api/agents', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(agentData)
            });
        }
        
        if (response.error) {
            throw new Error(response.error || 'שגיאה לא ידועה');
        }
        
        const result = response; // הנתונים כבר הומרו ל-JSON בפונקציית fetchApi
        console.log('תגובת השרת:', result);
        
        if (agentId) {
            alert('הסוכן עודכן בהצלחה');
        } else {
            alert('הסוכן נוצר בהצלחה');
        }
        
        // הסתרת המודאל ורענון הנתונים
        hideAgentModal();
        loadAgents();
        
    } catch (error) {
        console.error('שגיאה בשמירת הסוכן:', error);
        alert('אירעה שגיאה בשמירת פרטי הסוכן: ' + error.message);
    }
}

// הגדרת מאזיני אירועים לטפסים
function setupAgentEventListeners() {
    console.log('הגדרת מאזיני אירועים לסוכנים');
    
    // מאזין לכפתור הוספת סוכן
    const addAgentBtn = document.getElementById('addAgentBtn');
    if (addAgentBtn) {
        addAgentBtn.addEventListener('click', function() {
            showAgentModal();
        });
    }
    
    // מאזין לטופס הסוכן
    const agentForm = document.getElementById('agentForm');
    if (agentForm) {
        console.log('מצאתי את טופס הסוכן, מוסיף מאזין אירועים');
        // הסרת מאזינים קיימים
        const newForm = agentForm.cloneNode(true);
        agentForm.parentNode.replaceChild(newForm, agentForm);
        
        // הוספת מאזין חדש
        newForm.addEventListener('submit', handleAgentSubmit);
    } else {
        console.error('לא נמצא טופס הסוכן!');
    }
    
    // מאזין להעלאת תמונת סוכן
    const agentImageInput = document.getElementById('agent-image');
    if (agentImageInput) {
        agentImageInput.addEventListener('change', function(e) {
            handleAgentImageUpload(e.target.files[0]);
        });
    }
}

// פונקציה לטיפול בהעלאת תמונת סוכן
function handleAgentImageUpload(file) {
    if (!file) return;
    
    console.log('מעלה תמונת סוכן:', file.name, file.type);
    
    const reader = new FileReader();
    reader.onload = function(e) {
        const imagePreview = document.getElementById('agent-image-preview');
        if (imagePreview) {
            imagePreview.style.backgroundImage = `url(${e.target.result})`;
            console.log('תצוגה מקדימה של תמונת הסוכן עודכנה');
        }
    };
    reader.onerror = function(e) {
        console.error('שגיאה בקריאת קובץ התמונה:', e);
        alert('אירעה שגיאה בקריאת קובץ התמונה');
    };
    reader.readAsDataURL(file);
}

// אתחול מיידי של מאזיני אירועים עבור סוכנים - נקרא באופן אוטומטי בעת טעינת הסקריפט
// נריץ את הקוד הזה מיידית במקום להמתין לאירוע DOMContentLoaded
(function() {
    console.log('אתחול אוטומטי של מאזיני אירועים לסוכנים');
    
    // הוספת מאזין ישירות לטופס הסוכן
    const agentForm = document.getElementById('agentForm');
    if (agentForm) {
        console.log('מצאתי את טופס הסוכן, מוסיף מאזין אירוע submit');
        
        // הסרת מאזינים קיימים והוספת חדש
        const newForm = agentForm.cloneNode(true);
        agentForm.parentNode.replaceChild(newForm, agentForm);
        
        // הוספת מאזין חדש לאירוע submit
        newForm.addEventListener('submit', function(e) {
            console.log('טופס סוכן נשלח!');
            handleAgentSubmit(e);
        });
        
        // מאזין לכפתור ביטול
        const cancelBtn = document.getElementById('cancelAgentBtn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                hideAgentModal();
            });
        }
    } else {
        console.error('לא נמצא טופס הסוכן! ייתכן שעדיין לא נטען ה-DOM');
        // אם הטופס לא נמצא, ננסה שוב לאחר טעינת הדף
        window.addEventListener('DOMContentLoaded', function() {
            setupAgentEventListeners();
        });
    }
    
    // הוספת מאזין לכפתור הוספת סוכן
    const addAgentBtn = document.getElementById('addAgentBtn');
    if (addAgentBtn) {
        addAgentBtn.addEventListener('click', function() {
            showAgentModal();
        });
    }
    
    // מאזין להעלאת תמונת סוכן
    const agentImageInput = document.getElementById('agent-image');
    if (agentImageInput) {
        agentImageInput.addEventListener('change', function(e) {
            handleAgentImageUpload(e.target.files[0]);
        });
    }
    
    // טעינת רשימת הסוכנים
    loadAgents();
})();
